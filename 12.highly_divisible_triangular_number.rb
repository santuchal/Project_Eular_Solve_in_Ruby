# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?



# def find_divisor(number)
# 	sum = 1
# 	arr = [1]
# 	puts "number#{number}"
# 	for i in 2 .. (number/2)
# 		puts "The number is #{i}"
# 		if number % i == 0
# 			sum = sum + i
# 			#puts "Found 1 divisor #{i} and the sum is #{sum}"
# 			# if arr.length > 500 #&& sum == number
# 			# 	puts "Congragulations you found the number and the number is #{number}"
# 			# 	puts "The divisor is #{arr}"
# 			# 	exit(0)
# 			# end
# 			arr << i

# 		end
# 	end

# 	if arr.length > 500 and sum == number
# 		puts "Congragulations you found the number and the number is #{number}"
# 		puts "The divisor is #{arr}"
# 		exit(0)
# 	end
# end

#find_divisor(100)

iterator = 2
y = 2

arr = [1]
while(iterator >1)
	sum = 1
	#puts "iterator#{iterator}"
	for i in 2 .. (iterator/2)
		if iterator % i == 0
 			sum = sum + i
 			arr << i
 		end
	end
	#puts "Sum is #{sum}"
	iterator = iterator+1
	if arr.length > 500 && sum == iterator
		puts "Congragulations you found the number and the number is #{iterator}"
		puts "The divisor is #{arr}"
		exit(0)
	end
end

